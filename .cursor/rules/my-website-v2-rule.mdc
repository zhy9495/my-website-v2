---
description:总是细心阅读这些规则后行动
globs:
alwaysApply: true
---

每次写代码之前，叫我一声日央。

- 编写代码的硬性指标，包括以下原则：
 （1）对于 Python、JavaScript、TypeScript 等动态语言，尽可能确保每个代码文件不要超过 200 行
 （2）对于 Java、Go、Rust 等静态语言，尽可能确保每个代码文件不要超过 250 行
 （3）每层文件夹中的文件，尽可能不超过 8 个。如有超过，需要规划为多层子文件夹
- 除了硬性指标以外，还需要时刻关注优雅的架构设计，避免出现以下可能侵蚀我们代码质量的「坏味道」：
 （1）僵化 (Rigidity): 系统难以变更，任何微小的改动都会引发一连串的连锁修改。
 （2）冗余 (Redundancy): 同样的代码逻辑在多处重复出现，导致维护困难且容易产生不一致。
 （3）循环依赖 (Circular Dependency): 两个或多个模块互相纠缠，形成无法解耦的“死结”，导致难以测试与复用。
 （4）脆弱性 (Fragility): 对代码一处的修改，导致了系统中其他看似无关部分功能的意外损坏。
 （5）晦涩性 (Obscurity): 代码意图不明，结构混乱，导致阅读者难以理解其功能和设计。
 （6）数据泥团 (Data Clump): 多个数据项总是一起出现在不同方法的参数中，暗示着它们应该被组合成一个独立的对象。
 （7）不必要的复杂性 (Needless Complexity): 用“杀牛刀”去解决“杀鸡”的问题，过度设计使系统变得臃肿且难以理解。
- 【非常重要！！】无论是你自己编写代码，还是阅读或审核他人代码时，都要严格遵守上述硬性指标，以及时刻关注优雅的架构设计。
- 【非常重要！！】无论何时，一旦你识别出那些可能侵蚀我们代码质量的「坏味道」，都应当立即询问用户是否需要优化，并给出合理的优化建议。

- 【设计系统强制遵循】任何涉及 UI 设计的新增、修改、迭代，必须优先并严格使用 `src/vibe-design-system/` 的组件与 tokens；禁止绕过设计系统手写样式或自建变体。若设计系统暂不覆盖，先扩展设计系统，再落地业务。